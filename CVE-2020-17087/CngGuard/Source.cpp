#include "Undocumented.h"
#include "detour.h"

#include <ntddk.h>

void DriverUnload(PDRIVER_OBJECT DriverObject)
{
	CngDetour::restoreFunction(g_CfgAdtpFormatPropertyBlock);

	if (g_HijackedDriver)
	{
		ObDereferenceObject(g_HijackedDriver);
	}

	IoDeleteSymbolicLink(&g_SymbolicName);
	IoDeleteDevice(DriverObject->DeviceObject);

#ifndef _DEBUG
	DbgPrint("[%ws::%d] Completed successfully\n", __FUNCTIONW__, __LINE__);
#endif 
}

extern "C" NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING)
{
	NTSTATUS Status = STATUS_SUCCESS;
	PDEVICE_OBJECT DeviceObject = NULL;

	Status = IoCreateDevice(DriverObject, 0, &g_DeviceName, FILE_DEVICE_UNKNOWN, FILE_DEVICE_SECURE_OPEN, TRUE, &DeviceObject);
	if (!NT_SUCCESS(Status))
	{
#ifndef _DEBUG
		DbgPrint("[%ws::%d] Failed with status 0x%08x\n", __FUNCTIONW__, __LINE__, Status);
#endif 
		if (DeviceObject)
		{
			IoDeleteDevice(DeviceObject);
		}
		return Status;
	}

	Status = IoCreateSymbolicLink(&g_SymbolicName, &g_DeviceName);
	if (!NT_SUCCESS(Status))
	{
#ifndef _DEBUG
		DbgPrint("[%ws::%d] Failed with status 0x%08x\n", __FUNCTIONW__, __LINE__, Status);
#endif 
		IoDeleteDevice(DeviceObject);
		return Status;
	}

	/// 
	/// Get the object of the driver to easily get the base address of it for use afterwards
	/// 
	Status = ObReferenceObjectByName(
		&g_HijackedName,
		OBJ_CASE_INSENSITIVE,
		nullptr,
		0,
		*IoDriverObjectType,
		KernelMode,
		nullptr,
		reinterpret_cast<PVOID*>(&g_HijackedDriver)
	);
	if (!NT_SUCCESS(Status))
	{
		if (g_HijackedDriver)
		{
			ObDereferenceObject(g_HijackedDriver);
		}

		IoDeleteSymbolicLink(&g_SymbolicName);
		IoDeleteDevice(DriverObject->DeviceObject);
#ifndef _DEBUG
		DbgPrint("[%ws::%d] Failed with status 0x%08x\n", __FUNCTIONW__, __LINE__, Status);
#endif 
		return Status;
	}

	Status = CngDetour::resolveCfgAdtpFormatPropertyBlock(&g_CfgAdtpFormatPropertyBlock);
	if (!NT_SUCCESS(Status))
	{
#ifndef _DEBUG
		DbgPrint("[%ws::%d] Failed with status 0x%08x\n", __FUNCTIONW__, __LINE__, Status);
#endif 
		return Status;
	}

	Status = CngDetour::detourFunction(g_CfgAdtpFormatPropertyBlock);
	if (!NT_SUCCESS(Status))
	{
#ifndef _DEBUG
		DbgPrint("[%ws::%d] Failed with status 0x%08x\n", __FUNCTIONW__, __LINE__, Status);
#endif 
		return Status;
	}

	DriverObject->DriverUnload = DriverUnload;

#ifndef _DEBUG
	DbgPrint("[%ws::%d] Completed successfully\n", __FUNCTIONW__, __LINE__);
#endif 
	return Status;
}
/// EOF